<?php
/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class User {

	/**
	 * ID de l'utilisateur
	 * @var Int
	 */
	protected  $idUser;

	/**
	 * Pseudo de l'utilisateur
	 * @var String
	 */
	protected  $nicknameUser;

	/**
	 * E-mail de l'utilisateur
	 * @var String
	 */
	protected  $emailUser;

	/**
	 * Fonction __construct privée car PDO s'occupe de l'instanciation
	 * @access private
	 * @return void
	 */
	private  function __construct() {}


	/**
	 * Accesseur
	 * @access public
	 * @param String $name Nom de l'attribut
	 * @return Multiple
	 */
	public  function __get(String $name) {
		if(property_exists(__CLASS__, $name)){
			return $this->$name;
		}
		throw new NotAttributeException("L'attribut {$name} n'existe pas");
	}

	/**
	 * Setter
	 * @param String $name  Le nom de la propriété
	 * @param Multiple $value La valeur à lui attribuer
	 * @return null
	 */
	public function __set(String $name, $value) {
        if(property_exists(__CLASS__, $name)){
            $this->$name = $value;
        } else {
            return "Attribut inexistant";
        }
    }


    /**
     * Obtenir un utilisateur via ses informations
     */

    /**
     * Retourne l'utilisateur grâce à son id
     * @param  Int    $idUser Id de l'utilisateur
     * @return User         L'utilisateur
     */
    public static function getUserById(Int $idUser) {
        $bdd = MyPDO::getInstance();

        $pdo = $bdd->prepare("SELECT * FROM user WHERE idUser = ?");
        $pdo->execute(array($idUser));
        $pdo->setFetchMode(PDO::FETCH_CLASS, __CLASS__);

        $res = $pdo->fetch();

        if(empty($res)){
            return false;
        }

        return $res;
    }

    /**
     * Retourne l'utilisateur grâce à son pseudo
     * @param  String $nicknameUser Pseudo de l'utilisateur
     * @return User               L'utilisateur
     */
    public static function getUserByNickName(String $nicknameUser) {
        $bdd = MyPDO::getInstance();

        $pdo = $bdd->prepare("SELECT * FROM user WHERE nicknameUser = ?");
        $pdo->execute(array($nicknameUser));
        $pdo->setFetchMode(PDO::FETCH_CLASS, __CLASS__);

        $res = $pdo->fetch();

        if(empty($res)){
            return false;
        }

        return $res;
    }

    /**
     * Retourn l'utilisateur grâce à un cookie
     * @param  String $data Valeur du cookie
     * @return User       L'utilisateur
     */
    public static function getUserByCookie($data){
        $bdd = MyPDO::getInstance();

        $pdo = $bdd->prepare("SELECT * FROM user WHERE idUser = ?");
        $pdo->setFetchMode(PDO::FETCH_CLASS, __CLASS__);
        $pdo->execute([$data[0]]);

        $res = $pdo->fetch();

        if(empty($res)){
            setcookie("user", '', time() - 3600, '/', '', false, true);
            return false;
        }

        $key = hash("sha256", $res->nicknameUser . $res->emailUser);

        if($key == $data[1]){
            return User::createFromCookie($data[0]);
        } else {
            setcookie("user", '', time() - 3600, '/', '', false, true);
        }
    }

    /**
     * Retourne tous les utilisateurs
     * @return Array(User) Les utilisateur
     */
    public static function getUsers() {
        $bdd = MyPDO::getInstance();

        $pdo = $bdd->prepare("SELECT * FROM user");
        $pdo->execute();
        $pdo->setFetchMode(PDO::FETCH_CLASS, __CLASS__);

        $res = $pdo->fetchAll();

        if(empty($res)){
            return false;
        }

        return $res;
    }


    /**
     * Création de session
     */

    /**
     * Créée une session grâce au cookie
     * @param  Int $idUser Id de l'utilisateur
     * @return User         L'utilisateur
     */
    public static function createFromCookie(Int $idUser){
        $bdd = MyPDO::getInstance();

        $pdo = $bdd->prepare("SELECT idUser, nicknameUser, emailUser, validUser, redacArticle, editOwnArticle, deleteOwnArticle, editComment, deleteComment, isAdministrator FROM user WHERE idUser = ?");
        $pdo->setFetchMode(PDO::FETCH_CLASS, __CLASS__);
        $pdo->execute([$idUser]);
        $res = $pdo->fetch();

        setcookie("user", $res->idUser . '----' . hash("sha256", $res->nicknameUser . $res->emailUser), time() + 3600 * 24 * 15, '/', '', false, true);
        self::startSession();
        $_SESSION['connected'] = true;
        return $res;
    }


	/**
	 * Vérifie l'existence de l'utilisateur et retourne une instance de User s'il existe
	 * @access public
	 * @param array $data Contient les informations pour se connecter
	 * @return User
	 */
	public static  function createFromAuth($data) {
		$pdo = MyPDO::getInstance();
		if(empty($data['nickname']) || empty($data['password'])){
			return false;
		}
		$login = $pdo->prepare( "SELECT * FROM user WHERE nicknameUser = ? AND passwordUser = ?");
        $login->setFetchMode(PDO::FETCH_CLASS, __CLASS__);
		$login->execute(array($data['nickname'], $data['password']));
		$res = $login->fetch();
		if(empty($res)){
			return false;
		} else {
            if(isset($data['remember'])){
                setcookie("user", $res->idUser . '----' . hash("sha256", $res->nicknameUser . $res->emailUser), time() + 3600 * 24 * 15, '/', '', false, true);
            }
			self::startSession();
			$_SESSION['connected'] = true;
			return $res;
		}
	}

	/**
	 * Créée le formulaire de connexion
	 * @param  String $action La page où renverra le formulaire
	 * @return String         Le formulaire
	 */
	public static function connectionForm(String $action = "") : String{
		ob_start();
		?>
		<form action="<?= $action ?>" method="post">
			<input type="text" name="nickname">
			<input type="password" name="password">
			<input type="submit" name="connectionForm">
		</form>
		<?php

		return ob_get_clean();
	}


	/**
	 * Démarre une session si ce n'est pas encore fait
	 * @access public
	 * @return null
	 */
	public static  function startSession() {
		if(!session_id()){
			session_start();
		}
	}


	/**
	 * Linéarise l'utilisateur en l'enregistrant dans une variable de session
	 * @access public
	 * @return null
	 */
	public  function saveIntoSession() {
		self::startSession();
		$_SESSION['user'] = $this;
	}


	/**
	 * Délinéarisation de l'utilisateur
	 * @access public
	 * @return User
	 */
	public static  function createFromSession() {
		self::startSession();
		if (isset($_SESSION['user'])){
			$u = $_SESSION['user'];
			return $u;
		}
	}


	/**
	 * Vérifie si l'utilisateur est connecté
	 * @access public
	 * @return Bool
	 */
	public static  function isConnected() {
		try{
			self::startSession();
			if (isset($_SESSION['connected']) && $_SESSION['connected']) {
				return true;
			}
		} catch(SessionException $e){
			return "Échec d'authentification&nbsp;: {$e->getMessage()}";
		}
	}

	/**
	 * Déconnecte l'utilisateur
	 * @access public
	 * @return null
	 */
	public static  function logout() {
		self::startSession();
		session_destroy();
		unset($_SESSION);
        setcookie("user", '', time() - 3600, '/', '', false, true);
	}
}
?>
